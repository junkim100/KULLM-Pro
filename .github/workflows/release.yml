name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Extract release notes
      id: extract-release-notes
      run: |
        # Extract release notes from CHANGELOG.md
        python -c "
        import re
        with open('CHANGELOG.md', 'r') as f:
            content = f.read()
        
        # Find the first version section after [Unreleased]
        pattern = r'## \[([^\]]+)\] - \d{4}-\d{2}-\d{2}(.*?)(?=## \[|$)'
        match = re.search(pattern, content, re.DOTALL)
        
        if match:
            version = match.group(1)
            notes = match.group(2).strip()
            print(f'::set-output name=version::{version}')
            with open('release_notes.md', 'w') as f:
                f.write(notes)
        else:
            print('::set-output name=version::${GITHUB_REF#refs/tags/v}')
            with open('release_notes.md', 'w') as f:
                f.write('Release notes not found in CHANGELOG.md')
        "

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body_path: release_notes.md
        draft: false
        prerelease: false

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/
        asset_name: kullm-pro-dist
        asset_content_type: application/zip

    # Uncomment when ready to publish to PyPI
    # - name: Publish to PyPI
    #   env:
    #     TWINE_USERNAME: __token__
    #     TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
    #   run: |
    #     twine upload dist/*
